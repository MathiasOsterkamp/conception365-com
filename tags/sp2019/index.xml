<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SP2019 on Mathias Osterkamp</title><link>https://conception365.com/tags/sp2019/</link><description>Recent content in SP2019 on Mathias Osterkamp</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 31 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://conception365.com/tags/sp2019/index.xml" rel="self" type="application/rss+xml"/><item><title>SPFX Showcase - MySite</title><link>https://conception365.com/post/2021-08-31-spfx-showcase-mysite/</link><pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate><guid>https://conception365.com/post/2021-08-31-spfx-showcase-mysite/</guid><description>Modern Mysite on SharePoint 2019 I like to share some ideas from current project to have a modern MySite on a SharePoint 2019. It is completely created by a SPFX solution with multiple webparts. Unfortunately it is a customer project and i can not share any code.
It comes with three webparts:
Userprofile The user profile webpart shows your user profile information together with your profile picture in smart grouped categories.</description></item><item><title>SPFX 2019 - speed up npm performance</title><link>https://conception365.com/post/2021-08-13-spfx-2019-pnpm/</link><pubDate>Fri, 13 Aug 2021 00:00:00 +0000</pubDate><guid>https://conception365.com/post/2021-08-13-spfx-2019-pnpm/</guid><description>Problem For current sharepoint projects we have huge node_modules folders. With every new project we have to download everything again. I started to look for a better solution and found pnpm.
Solution pnpm is a complete custom package manager designed for better performance, but compatible with npm. Instead of heaving multiple packages it uses symlinks and reuses packages. They published a speed comparison, in some tests it is pretty fast, especial if you already have some projects.</description></item><item><title>Javascript - Publish classic list form webparts</title><link>https://conception365.com/post/2021-07-02-spfx-publish-classic-listforms/</link><pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate><guid>https://conception365.com/post/2021-07-02-spfx-publish-classic-listforms/</guid><description>Problem For classic SharePoint 2019 libraries you still need your EditForm.aspx and DispForm.aspx to edit your properties. If you like to make any changes, create another form page or repair it by code, it is a little bit more complicated. Most time you try to edit the &amp;ldquo;DefaultEditFormUrl&amp;rdquo; property of your list. If you try to change the &amp;ldquo;DefaultEditFormUrl&amp;rdquo; property it leads some time to the following error:
Unable to find an SPForm matching URL.</description></item><item><title>SPFX 2019 Custom Installer</title><link>https://conception365.com/post/2021-05-19-spfx-2019-custominstaller/</link><pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate><guid>https://conception365.com/post/2021-05-19-spfx-2019-custominstaller/</guid><description>What we create In SharePoint SPFX solution development you have most time the requirement to do some installation tasks. You have multiple solutions for that problem. First - most content can be deployed via XML manifest files to your website. This helps you with the most basic stuff, but if you like to do some more modifications, for example set special permissions on lists or deploy webparts to your page, it have to be done extra.</description></item><item><title>SPFX 2019 Unexpected token - Uglify</title><link>https://conception365.com/post/2021-05-19-spfx-2019-unexpected-token/</link><pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate><guid>https://conception365.com/post/2021-05-19-spfx-2019-unexpected-token/</guid><description>Problem If you are using some third party libraries on SPFX 2019 there can be a problem with your typescript language set. Everything works fine in development, but on production build you get an error message like this one:
SyntaxError: Unexpected token: name (xxxxxx) from Uglify plugin The problem ist, that third party library uses ES6 code and UglifyJS ist not able to compile ES6.
Solution UglifyJS does not support this compile, so we can go for TerserPlugin.</description></item><item><title>Migrate User Profile My Links</title><link>https://conception365.com/post/2021-05-06-import-export-userprofilelinks/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>https://conception365.com/post/2021-05-06-import-export-userprofilelinks/</guid><description>Problem SharePoint users can store favorite links directly inside the mysite. If you like to migrate to another SharePoint version or different server maybe you like to transfer these links without copy the database. In general these links are stored in the ProfileDB of your server. There is a smart article about this from Vinods source.
Here a small sample, where you can edit links:
source
Solution I wrote a improved script to import and export the data via xml.</description></item><item><title>SPFX 2019 eslint and prettier</title><link>https://conception365.com/post/2021-04-22-spfx-2019-prettier-eslint/</link><pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate><guid>https://conception365.com/post/2021-04-22-spfx-2019-prettier-eslint/</guid><description>For our current projects we used tslint and suffered for some problems. First main concern was, that VSCode was not able to give full feedback about code problems. Later on execution of gulp build all errors where thrown. Furthermore we got some conflicts with prettier solution and it was a hell to understand the current used rules from tslint. Also the tslint performance was very awful. We know it is deprecated for a while source and now its time to get rid of it.</description></item><item><title>SPFX 2019 Libraries with PnP JS</title><link>https://conception365.com/post/2021-03-20-spfx-2019-libraries/</link><pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate><guid>https://conception365.com/post/2021-03-20-spfx-2019-libraries/</guid><description>What we create Ok. Here a small preview, what we like to create in this guide. A sample webpart loading your code from a library, here together with PnP JS to get all site groups.
You find the complete source code for the solution here.
What are SPFX libraries? If we come to the library topic most people start with the default description from microsoft. (source)
The library component type in the SharePoint Framework (SPFx) enables you to have independently versioned and deployed code served automatically for the SharePoint Framework components with a deployment through an app catalog.</description></item><item><title>Remove Managed Metadata Orphaned Terms</title><link>https://conception365.com/post/2021-02-11-orphaned-terms/</link><pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate><guid>https://conception365.com/post/2021-02-11-orphaned-terms/</guid><description>Problem In some cases you like to get rid of orphaned terms. Terms mostly get orphaned, if you reuse terms and delete the original instances. There is a very good explanation from Mike Morawski how this could happen.
Not long ago I was working away with the term store though Powershell. I had to remove all of a particular group’s termsets and to do this I ended up calling the Group’s delete function.</description></item><item><title>Managed Metadata Migration</title><link>https://conception365.com/post/2020-12-12-managed-metadata-migration/</link><pubDate>Sat, 12 Dec 2020 00:00:00 +0000</pubDate><guid>https://conception365.com/post/2020-12-12-managed-metadata-migration/</guid><description>Managed metadata is a formal taxonomy classification system. A taxonomy groups the words, labels, and terms that describe something, and then arranges the groups into a hierarchy. You can learn more basics and wordings on microsoft docs. Mostly it is simple called term store.
Where are my data stored? The first common question for migration is, where actual the term store data are stored. The short answer is, everything important is stored in Managed Metadata SQL Database of the service application.</description></item></channel></rss>